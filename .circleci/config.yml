version: 2.1

### It's a good practice to keep your commands at the top of the config file. In this project, you'll need at least 2 commands:

commands:
  destroy-aws-resource:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Delete all files in S3 bucket
          command: |
            if aws s3api head-bucket --bucket udapeople-${CIRCLE_WORKFLOW_ID}
            then
              aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID}/ --recursive
            fi
          when: on_fail
      - run:
          name: Delete current AWS CloudFormation stacks
          command: |
            if aws cloudformation describe-stacks --stack-name udapeople-cloudfront
            then 
              aws cloudformation delete-stack --stack-name udapeople-cloudfront
            fi
            if aws cloudformation describe-stacks --stack-name udapeople-frontend
            then 
              aws cloudformation delete-stack --stack-name udapeople-frontend
            fi
            if aws cloudformation describe-stacks --stack-name udapeople-backend
            then
              aws cloudformation delete-stack --stack-name udapeople-backend
            fi
          when: on_fail

  revert-migration:
    description: Revert the last migration if successfully run in the current workflow
    steps:
      - run:
          name: Get the public DNS of EC2 instance from https://memstash.io/
          command: |
            PUBLIC_DNS=$(curl -H "token: de8dfebb-4853-48b3-88e7-67441f6ae6ad" --request GET https://api.memstash.io/values/public_dns)
            echo ${PUBLIC_DNS}
            cd .circleci/ansible/
            echo "[all]" > ./inventory
            echo ${PUBLIC_DNS} >> ./inventory
            cat ./inventory
          when: on_fail
      - run:
          name: Configure server
          command: |
            printenv >> ./backend/.env
            cd .circleci/ansible/
            ansible-playbook -i ./inventory db_rollback.yml
          when: on_fail

parameters:
  circleci_image:
    type: string
    default: circleci/node:latest
  py_alp_image:
    type: string
    default: python:3.7-alpine3.11

orbs:
  slack: circleci/slack@3.4.2  # for slack integration to https://udapeople.slack.com; reference: https://circleci.com/blog/continuous-integration-slack-twilio/

jobs:
  hello:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    steps:
      - run: echo "My pipeline id is << pipeline.id >> and my git branch is << pipeline.git.branch >>."
      - checkout
      - run: pwd
      - run: ls -Rla ~
      - run: node -v
      - run: df -h
      - run: free -h

  build-frontend:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Compile the code
          command: |
            cd frontend
            npm run build
      - slack/status

  test-frontend:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Test the code
          command: |
            cd frontend
            npm run test
      - slack/status

  analyze-frontend:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Analyze the code
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
      - slack/status

  build-backend:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Compile the code
          command: |
            cd backend
            npm run build
      - slack/status

  test-backend:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Test the code
          command: |
            cd backend
            npm run test
      - slack/status

  analyze-backend:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Analyze the code
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - slack/status

  create-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create/Update frontend infrastructure
          command: |
            aws cloudformation deploy \
              --stack-name udapeople-frontend \
              --template-file .circleci/files/frontend.yml \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Create/Update backend infrastructure
          command: |
            aws cloudformation deploy \
              --stack-name udapeople-backend \
              --template-file .circleci/files/backend.yml \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Get and save public DNS of EC2 instance to https://memstash.io/
          command: |
            PUBLIC_DNS=$(aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} --query "Reservations[*].Instances[0].PublicDnsName"  --output text)
            echo ${PUBLIC_DNS}
            curl -H "Content-Type: text/plain" \
               -H "token: de8dfebb-4853-48b3-88e7-67441f6ae6ad" \
               --request PUT \
               --data ${PUBLIC_DNS} \
               https://api.memstash.io/values/public_dns
      - destroy-aws-resource
      - slack/status

  deploy-backend:
    docker:
      - image: << pipeline.parameters.py_alp_image >>
    steps:
      - checkout
      - run:
          name: Install system dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update ansible
            apk add --no-cache openssh-client
            pip3 install awscli
      - run:
          name: Get the public DNS of EC2 instance from https://memstash.io/
          command: |
            PUBLIC_DNS=$(curl -H "token: de8dfebb-4853-48b3-88e7-67441f6ae6ad" --request GET https://api.memstash.io/values/public_dns)
            echo ${PUBLIC_DNS}
            cd .circleci/ansible/
            echo "[all]" > ./inventory
            echo ${PUBLIC_DNS} >> ./inventory
            cat ./inventory
      - add_ssh_keys:
          fingerprints: ["f2:e7:96:70:ce:5d:29:68:ec:2d:1d:33:71:52:8b:05"] # get it from CircleCI -> Project Settings -> SSH Keys -> Additional SSH Keys
      - run:
          name: Configure server
          command: |
            printenv >> ./backend/.env
            cd .circleci/ansible/
            ansible-playbook -i ./inventory main.yml
      - revert-migration
      - destroy-aws-resource
      - slack/status

  deploy-frontend:
    docker:
      - image: << pipeline.parameters.py_alp_image >>
    steps:
      - checkout
      - run:
          name: Install system dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update npm
            pip3 install awscli
      - run:
          name: Get the public DNS of EC2 instance from https://memstash.io/ (frontend build needs ${API_URL})
          command: |
            PUBLIC_DNS=$(curl -H "token: de8dfebb-4853-48b3-88e7-67441f6ae6ad" --request GET https://api.memstash.io/values/public_dns)
            echo ${PUBLIC_DNS}
            export default API_URL=http://${PUBLIC_DNS}:3030
      - run:
          name: Build the frontend
          command: |
            cd frontend
            npm install
            npm run build
      - run: 
          name: Copy built frontend files to the S3 bucket
          command: |
            aws s3 cp ./frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID}/ --recursive
      - destroy-aws-resource
      - slack/status

  create-cloudfront:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create/Update CloudFront
          command: |
            aws cloudformation deploy \
              --stack-name udapeople-cloudfront \
              --template-file .circleci/files/cloudfront.yml \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - destroy-aws-resource
      - slack/status

  smoke-test:
    docker:
      - image: << pipeline.parameters.py_alp_image >>
    steps:
      - run:
          name: Install system dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update ansible
            apk add --no-cache openssh-client
            pip3 install awscli
      - run:
          name: Smoke Test on Frontend
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website.us-east-2.amazonaws.com/#/employees"
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Smoke Test on Backend (make a mistake deliberately)
          command: |
            PUBLIC_DNS=$(curl -H "token: de8dfebb-4853-48b3-88e7-67441f6ae6ad" --request GET https://api.memstash.io/values/public_dns)
            if curl -s "http://${PUBLIC_DNS}:3030/api/status" | grep "ok"
            then
              return 1
            else
              return 1
            fi
      - revert-migration
      - destroy-aws-resource
      - slack/status

#  cloudfront-update:

  clean-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Remove all files at S3 bucket used for frontend
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID} --recursive
      - run:
          name: Destroy and clear stack resources (S3 bucket should be cleared first)
          command: |
            STACK_NAME=$(aws cloudformation list-stacks \
              --stack-status-filter CREATE_IN_PROGRESS CREATE_COMPLETE ROLLBACK_IN_PROGRESS ROLLBACK_FAILED ROLLBACK_COMPLETE DELETE_IN_PROGRESS DELETE_FAILED UPDATE_IN_PROGRESS UPDATE_COMPLETE_CLEANUP_IN_PROGRESS UPDATE_COMPLETE UPDATE_ROLLBACK_IN_PROGRESS UPDATE_ROLLBACK_FAILED UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS UPDATE_ROLLBACK_COMPLETE REVIEW_IN_PROGRESS \
              --query "StackSummaries[*].StackName" \
              --output text)
            echo ${STACK_NAME}
            for stack in ${STACK_NAME}
            do  
                echo deleting stack $stack
                aws cloudformation delete-stack --stack-name $stack
            done
      - slack/status

workflows:
  frontend:
    jobs:
      - hello
      - build-frontend:
          requires:
            - hello
      - test-frontend:
          requires:
            - build-frontend
      - analyze-frontend:
          requires:
            - test-frontend
  backend:
    jobs:
      - hello
      - build-backend:
          requires:
            - hello
      - test-backend:
          requires:
            - build-backend
      - analyze-backend:
          requires:
            - test-backend
  deploy:
    jobs:
      - create-infrastructure
      - deploy-backend:
          requires:
            - create-infrastructure
      - deploy-frontend:
          requires:
            - deploy-backend
      - create-cloudfront:
          requires:
            - deploy-frontend
      - smoke-test:
          requires:
            - deploy-frontend
      # - clean-infrastructure:
      #    requires:
      #      - deploy-backend