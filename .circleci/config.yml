version: 2.1

### It's a good practice to keep your commands at the top of the config file. In this project, you'll need at least 2 commands:

# commands:
#   destroy-environment:
#     description: Destroy backend and frontend cloudformation stacks given a workflow ID.
#     ...

#   revert-migration:
#     description: Revert the last migration if successfully run in the current workflow.
#     ...

parameters:
  image:
    type: string
    default: circleci/node:latest

orbs:
  slack: circleci/slack@3.4.2  # for slack integration to https://udapeople.slack.com; reference: https://circleci.com/blog/continuous-integration-slack-twilio/

jobs:
  hello:
    docker:
      - image: << pipeline.parameters.image >>
    steps:
      - run: echo "My pipeline id is << pipeline.id >> and my git branch is << pipeline.git.branch >>."
      - checkout
      - run: pwd
      - run: ls -Rla ~
      - run: node -v

  build-frontend:
    docker:
      - image: << pipeline.parameters.image >>
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Compile the code
          command: |
            cd frontend
            npm run build
      - slack/status

  test-frontend:
    docker:
      - image: << pipeline.parameters.image >>
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Test the code
          command: |
            cd frontend
            npm run test
      - slack/status

  analyze-frontend:
    docker:
      - image: << pipeline.parameters.image >>
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Analyze the code
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
      - slack/status

  build-backend:
    docker:
      - image: << pipeline.parameters.image >>
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Compile the code
          command: |
            cd backend
            npm run build
      - slack/status

  test-backend:
    docker:
      - image: << pipeline.parameters.image >>
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Test the code
          command: |
            cd backend
            npm run test
      - slack/status

  analyze-backend:
    docker:
      - image: << pipeline.parameters.image >>
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Analyze the code
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - slack/status

  create-frontend-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create frontend infrastructure
          command: |
            aws cloudformation deploy \
              --stack-name udapeople \
              --template-file .circleci/files/frontend.yml \
              --region us-east-2 \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"

  create-backend-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create backend infrastructure
          command: |
            aws cloudformation deploy \
              --stack-name udapeople \
              --template-file .circleci/files/backend.yml \
              --region us-east-2 \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
              
#  deploy-infrastructure:

#  run-migrations:

#  deploy-frontend:

#  deploy-backend:  

#  smoke-test:

#  cloudfront-update:

workflows:
  frontend:
    jobs:
      - hello
      - build-frontend:
          requires:
            - hello
      - test-frontend:
          requires:
            - build-frontend
      - analyze-frontend:
          requires:
            - test-frontend
      - create-frontend-infrastructure:
          requires:
            - analyze-frontend
  backend:
    jobs:
      - hello
      - build-backend:
          requires:
            - hello
      - test-backend:
          requires:
            - build-backend
      - analyze-backend:
          requires:
            - test-backend
      - create-backend-infrastructure:
          requires:
            - analyze-backend